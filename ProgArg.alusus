import "Srl/Console";
import "Srl/String";
import "Srl/Array";
import "Srl/Map";
import "Srl/refs";
import "Srl/Fs";
import "closure";
import "Apm";
Apm.importFile("Alusus/I18n");

module ProgArg {
    use Srl;

    // Definitions

    class CmdDef {
        def kwd: String;
        def description: String;
        def options: Map[String, String];
        def args: Map[String, String];
        def numRequiredArgs: Int = -1;
        def subCmds: Array[SrdRef[CmdDef]];
        def callback: closure(options: Map[String, String], args: Array[String]);
        def startCallback: closure(options: Map[String, String], args: Array[String]);
        def endCallback: closure(options: Map[String, String], args: Array[String]);
        
        handler this_type(): SrdRef[CmdDef] {
            return SrdRef[CmdDef].construct();
        }
    }

    def cmdDef: SrdRef[CmdDef];
    def i18nOut: I18n.Dictionary;
    def i18nIn: I18n.Dictionary;

    // Initialization

    function initialize() {
        initialize(Process.language);
    }

    function initialize(lang: CharsPtr) {
        def poContent: String = Fs.readFile(String(getThisSourceDirectory[]) + "I18n/" + lang + ".po");
        if poContent != "" i18nOut.add(poContent);
        poContent = Fs.readFile(String(getThisSourceDirectory[]) + "I18n/" + lang + "_in.po");
        if poContent != "" i18nIn.add(poContent);
    }

    // Help Printing Functions

    function printHelp(argStartIndex: Int) {
        def cmd: SrdRef[CmdDef] = cmdDef;
        def i: Int;
        for i = argStartIndex, i < Process.argCount - 1, ++i {
            cmd = findSubCommand(cmd, i18nIn(Process.args~cnt(i)));
            if cmd.isNull() {
                System.fail(1, String.format(i18nOut("Command not found: %s"), Process.args~cnt(i)));
            }
        }
        if cmd.obj~ptr == cmdDef.obj~ptr {
            for i = 0, i < argStartIndex, ++i {
                Console.print("%s ", Process.args~cnt(i));
            }
        }
        printHelp(cmd, 0);
    }

    function printHelp(cmdDef: SrdRef[CmdDef], tabs: Int) {
        indent(2 * tabs);
        if cmdDef.kwd != "" Console.print(getLocalizedKwd(cmdDef.kwd));
        if cmdDef.options.getLength() > 0 {
            Console.print(" [%s]", i18nOut("options").buf);
        }
        def i: Int;
        for i = 0, i < cmdDef.args.getLength(), ++i {
            if cmdDef.numRequiredArgs >= 0 and i >= cmdDef.numRequiredArgs {
                Console.print(" [<%s>]", i18nOut(cmdDef.args.keyAt(i)).buf);
            } else {
                Console.print(" <%s>", i18nOut(cmdDef.args.keyAt(i)).buf);
            }
        }
        if cmdDef.subCmds.getLength() > 0 {
            Console.print(" <%s>", i18nOut("subcommands").buf);
        }
        Console.print("\n");
        if cmdDef.description != "" {
            indent(2 * tabs + 2);
            printAtColumn(i18nOut(cmdDef.description), 2 * tabs + 2);
        }
        if cmdDef.args.getLength() > 0 {
            indent(2 * tabs);
            Console.print("* %s:\n", i18nOut("Arguments").buf);
            for i = 0, i < cmdDef.args.getLength(), ++i {
                indent(2 * (tabs + 2));
                printAtColumn(
                    String("- ") + i18nOut(cmdDef.args.keyAt(i))
                    + ": " + i18nOut(cmdDef.args.valAt(i)), 2 * (tabs + 4)
                );
            }
        }
        if cmdDef.options.getLength() > 0 {
            indent(2 * tabs);
            Console.print("* %s:\n", i18nOut("Options").buf);
            for i = 0, i < cmdDef.options.getLength(), ++i {
                indent(2 * (tabs + 2));
                printAtColumn(
                    String("--") + getLocalizedKwd(cmdDef.options.keyAt(i))
                    + ": " + i18nOut(cmdDef.options.valAt(i)), 2 * (tabs + 4));
            }
        }
        if cmdDef.subCmds.getLength() > 0 {
            Console.print("\n");
            indent(tabs * 2);
            Console.print("# %s:\n", i18nOut("Subcommands").buf);
            for i = 0, i < cmdDef.subCmds.getLength(), ++i {
                Console.print("\n");
                printHelp(cmdDef.subCmds(i), tabs + 1);
            }
        }
    }

    function indent(columns: Int) {
        def i: Int;
        for i = 0, i < columns, ++i {
            Console.print(" ");
        }
    }

    function printAtColumn(str: String, columns: Int) {
        def lines: Array[String] = str.split("\n");
        def i: Int;
        for i = 0, i < lines.getLength(), ++i {
            if i != 0 indent(columns);
            Console.print(lines(i));
            Console.print("\n");
        }
    }

    function getLocalizedKwd(kwd: String): String {
        def lKwd: String = i18nOut(kwd);
        if lKwd == kwd return kwd
        else return lKwd + "|" + kwd;
    }

    // Parsing Functions

    function parse(argStartIndex: Int) {
        if cmdDef.isNull() return;

        // Check if help is requested.
        def localizedLastArg: String = i18nIn(Process.args~cnt(Process.argCount - 1));
        if String.compare(localizedLastArg, "--help") == 0 or String.compare(localizedLastArg, "-h") == 0 {
            printHelp(argStartIndex);
            return;
        }

        // Run the commands.
        def i: Int = parse(cmdDef, argStartIndex);
        if i < Process.argCount {
            System.fail(1, String.format(i18nOut("Invalid argument: %s"), Process.args~cnt(i)));
        }
    }

    function parse(cmdDef: SrdRef[CmdDef], argStartIndex: Int): Int {
        def options: Map[String, String];
        def args: Array[String];
        def subCmdDef: SrdRef[CmdDef];
        def i: Int;
        for i = argStartIndex, i < Process.argCount, ++i {
            // Compare against options.
            if String.compare(Process.args~cnt(i), "--", 2) == 0 {
                def option: Array[String] = String(Process.args~cnt(i) + 2).split("=");
                def optionKwd: String = i18nIn(option(0));
                if cmdDef.options(optionKwd) != "" {
                    options(optionKwd) = option(1);
                    continue;
                } else {
                    if cmdDef.kwd != "" {
                        System.fail(1, String.format(
                            i18nOut("Invalid option %s for command %s"), option(0).buf, getLocalizedKwd(cmdDef.kwd).buf
                        ));
                    } else {
                        System.fail(1, String.format(i18nOut("Invalid option %s"), option(0).buf));
                    }
                }
            }
            // Compare against subcommands.
            subCmdDef = findSubCommand(cmdDef, i18nIn(Process.args~cnt(i)));
            if !subCmdDef.isNull() break;
            // Pick up arguments.
            if args.getLength() < cmdDef.args.getLength() {
                args.add(String(Process.args~cnt(i)));
            } else {
                break;
            }
        }
        // Error if required arguments are missing.
        def numRequiredArgs: Int = cmdDef.numRequiredArgs;
        if numRequiredArgs < 0 numRequiredArgs = cmdDef.args.getLength();
        if args.getLength() < numRequiredArgs {
            if cmdDef.kwd != "" {
                System.fail(1, String.format(
                    i18nOut("Missing required arguments for command: %s"), getLocalizedKwd(cmdDef.kwd).buf
                ));
            } else {
                System.fail(1, String.format(i18nOut("Missing required arguments.")));
            }
        }
        // Run callback, or parse subcommands.
        if subCmdDef.isNull() {
            if not cmdDef.callback.isNull() cmdDef.callback(options, args);
        } else {
            // Parse subcommands.
            if not cmdDef.startCallback.isNull() {
                cmdDef.startCallback(options, args);
            }
            while not subCmdDef.isNull() {
                i = parse(subCmdDef, i + 1);
                if i >= Process.argCount break;
                subCmdDef = findSubCommand(cmdDef, i18nIn(Process.args~cnt(i)));
            }
            if not cmdDef.endCallback.isNull() {
                cmdDef.endCallback(options, args);
            }
        }
        return i;
    }

    // Helper Functions

    function findSubCommand(cmdDef: SrdRef[CmdDef], kwd: CharsPtr): SrdRef[CmdDef] {
        def i: Int;
        for i = 0, i < cmdDef.subCmds.getLength(), ++i {
            if cmdDef.subCmds(i).kwd == kwd {
                return cmdDef.subCmds(i);
            }
        }
        return SrdRef[CmdDef]();
    }
}
